<rss xmlns:atom="http://www.w3.org/2005/Atom" version="2.0">
  <channel>
    <title>hongwei 的博客</title>
    <link>https://hongwei7.online/</link>
    <description>欢迎来到hongwei7的个人博客</description>
    <generator>Hugo -- gohugo.io</generator><language>zh-CN</language><managingEditor>1216869567@qq.com (hongwei)</managingEditor>
      <webMaster>1216869567@qq.com (hongwei)</webMaster><copyright>This work is licensed under a Creative Commons Attribution-NonCommercial 4.0 International License.</copyright><lastBuildDate>Mon, 03 Jul 2023 01:06:59 &#43;0800</lastBuildDate>
      <atom:link href="https://hongwei7.online/index.xml" rel="self" type="application/rss+xml" />
    <item>
  <title>用golang写gee(day7)</title>
  <link>https://hongwei7.online/%E7%94%A8golang%E5%86%99geeday7/</link>
  <pubDate>Mon, 03 Jul 2023 01:06:59 &#43;0800</pubDate>
  <author>hongwei</author>
  <guid>https://hongwei7.online/%E7%94%A8golang%E5%86%99geeday7/</guid>
  <description><![CDATA[<div class="featured-image">
        <img src="/images/gin.png" referrerpolicy="no-referrer">
      </div><p>在 Go 中 panic 会导致程序被中止，但是在退出前，会先处理完当前协程上已经 defer 的任务，执行完成后再退出。效果类似于 java 语言的 <code>try...catch</code>。defer 的任务执行完成之后，panic 还会继续被抛出，导致程序非正常结束。</p>
<p>Go 语言还提供了 recover 函数，可以避免因为 panic 发生而导致整个程序终止，recover 函数只在 defer 中生效。</p>]]></description>
</item>
<item>
  <title>用golang写gee(day6)</title>
  <link>https://hongwei7.online/%E7%94%A8golang%E5%86%99geeday6/</link>
  <pubDate>Fri, 30 Jun 2023 01:06:59 &#43;0800</pubDate>
  <author>hongwei</author>
  <guid>https://hongwei7.online/%E7%94%A8golang%E5%86%99geeday6/</guid>
  <description><![CDATA[<div class="featured-image">
        <img src="/images/gin.png" referrerpolicy="no-referrer">
      </div><p>利用<code>http</code>包的<code>http.FileServer</code>，结合动态路由来实现<code>Static</code>方法，随意访问任意路径下的文件。</p>]]></description>
</item>
<item>
  <title>用golang写gee(day5)</title>
  <link>https://hongwei7.online/%E7%94%A8golang%E5%86%99geeday5/</link>
  <pubDate>Fri, 23 Jun 2023 21:58:21 &#43;0800</pubDate>
  <author>hongwei</author>
  <guid>https://hongwei7.online/%E7%94%A8golang%E5%86%99geeday5/</guid>
  <description><![CDATA[<div class="featured-image">
        <img src="/images/gin.png" referrerpolicy="no-referrer">
      </div><p>项目地址：<a href="https://geektutu.com/post/gee-day5.html"target="_blank" rel="external nofollow noopener noreferrer">https://geektutu.com/post/gee-day5.html</a></p>]]></description>
</item>
<item>
  <title>用golang写gee(day4)</title>
  <link>https://hongwei7.online/%E7%94%A8golang%E5%86%99geeday4/</link>
  <pubDate>Tue, 20 Jun 2023 02:17:21 &#43;0800</pubDate>
  <author>hongwei</author>
  <guid>https://hongwei7.online/%E7%94%A8golang%E5%86%99geeday4/</guid>
  <description><![CDATA[<div class="featured-image">
        <img src="/images/gin.png" referrerpolicy="no-referrer">
      </div>项目地址：https://geektutu.com/post/gee-day4.html 目标 这次要完成http的分组功能，简而言之，就是对于]]></description>
</item>
<item>
  <title>用golang写gee(day3)</title>
  <link>https://hongwei7.online/%E7%94%A8golang%E5%86%99geeday3/</link>
  <pubDate>Mon, 19 Jun 2023 00:46:21 &#43;0800</pubDate>
  <author>hongwei</author>
  <guid>https://hongwei7.online/%E7%94%A8golang%E5%86%99geeday3/</guid>
  <description><![CDATA[<div class="featured-image">
        <img src="/images/gin.png" referrerpolicy="no-referrer">
      </div><p>项目地址：<a href="https://geektutu.com/post/gee-day3.html"target="_blank" rel="external nofollow noopener noreferrer">https://geektutu.com/post/gee-day3.html</a></p>
<h3 id="目标">目标</h3>
<p>day3的任务是，实现<code>http</code>的动态路由，即访问路径带有<code>:name</code>的资源时，可以顺利匹配；访问路径带有<code>*</code>的资源时，直接匹配后面所有资源。</p>]]></description>
</item>
<item>
  <title>SPLAY伸展树</title>
  <link>https://hongwei7.online/splay%E4%BC%B8%E5%B1%95%E6%A0%91/</link>
  <pubDate>Sun, 18 Jun 2023 04:49:13 &#43;0800</pubDate>
  <author>map[avatar:&lt;nil&gt; email:&lt;nil&gt; link:&lt;nil&gt; name:&lt;nil&gt;]</author>
  <guid>https://hongwei7.online/splay%E4%BC%B8%E5%B1%95%E6%A0%91/</guid>
  <description><![CDATA[<div class="featured-image">
        <img src="https://media.geeksforgeeks.org/wp-content/uploads/20230203100633/Zig-rotation.png" referrerpolicy="no-referrer">
      </div><p>SplayTree伸展树用于毕业设计之中，它本身是一种常见的数据结构算法。</p>]]></description>
</item>
<item>
  <title>用golang写gee(day2)</title>
  <link>https://hongwei7.online/%E7%94%A8golang%E5%86%99geeday2/</link>
  <pubDate>Sun, 18 Jun 2023 03:49:21 &#43;0800</pubDate>
  <author>hongwei</author>
  <guid>https://hongwei7.online/%E7%94%A8golang%E5%86%99geeday2/</guid>
  <description><![CDATA[<div class="featured-image">
        <img src="/images/gin.png" referrerpolicy="no-referrer">
      </div>项目地址：https://geektutu.com/post/gee-day2.html 目标 今天的目的是，进一步把engine抽象成rout]]></description>
</item>
<item>
  <title>用golang写gee(day1)</title>
  <link>https://hongwei7.online/%E7%94%A8golang%E5%86%99geeday1/</link>
  <pubDate>Thu, 15 Jun 2023 01:47:43 &#43;0800</pubDate>
  <author>hongwei</author>
  <guid>https://hongwei7.online/%E7%94%A8golang%E5%86%99geeday1/</guid>
  <description><![CDATA[<div class="featured-image">
        <img src="/images/gin.png" referrerpolicy="no-referrer">
      </div>项目地址：https://geektutu.com/post/gee-day1.html 实现 第一天主要介绍net/http模块的用法，实现了]]></description>
</item>
<item>
  <title>个人工作流程规划</title>
  <link>https://hongwei7.online/%E5%B7%A5%E4%BD%9C%E6%B5%81/</link>
  <pubDate>Sun, 26 Feb 2023 11:39:15 &#43;0800</pubDate>
  <author>hongwei</author>
  <guid>https://hongwei7.online/%E5%B7%A5%E4%BD%9C%E6%B5%81/</guid>
  <description><![CDATA[<div class="featured-image">
        <img src="/images/%e5%b7%a5%e4%bd%9c%e6%b5%81/title.jpg" referrerpolicy="no-referrer">
      </div>有了工作后，发现之前想用上的一些软件都能用上了。那就不妨设立几种常见工作场景，总结一下使用什么软件和方法来解决。这样也能给自己工作流程加点规范，也算是我强迫症的表现。]]></description>
</item>
<item>
  <title>理解平摊分析</title>
  <link>https://hongwei7.online/%E7%90%86%E8%A7%A3%E5%B9%B3%E6%91%8A%E5%88%86%E6%9E%90-7a26c/</link>
  <pubDate>Tue, 12 Apr 2022 11:22:05 &#43;0800</pubDate>
  <author>hongwei</author>
  <guid>https://hongwei7.online/%E7%90%86%E8%A7%A3%E5%B9%B3%E6%91%8A%E5%88%86%E6%9E%90-7a26c/</guid>
  <description><![CDATA[<div class="featured-image">
        <img src="https://tse1-mm.cn.bing.net/th/id/OIP-C.tSrZz_I2ToRj9-3lG17vewHaD9?pid=ImgDet&amp;rs=1" referrerpolicy="no-referrer">
      </div>Amortized Analysis，是对算法复杂度的另一种分析。它的基本概念是，给定一连串操作，大部分的操作是非常廉价的，有极少的操作可能非常昂贵，因此一个标准的最坏分析可能过于消极了。因此，其基本理念在于，当昂贵的操作特别少的时候，他们的成本可能会均摊到所有的操作上。]]></description>
</item>
</channel>
</rss>
